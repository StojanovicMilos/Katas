using System;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

// <auto-generated from https://app.quicktype.io//>
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var person = Person.FromJson(jsonString);

namespace APIUsageChallenge
{
    public class PersonDTO
    {
        public static PersonDTO FromJson(string json) => JsonConvert.DeserializeObject<PersonDTO>(json, Converter.Settings);

        [JsonProperty("name")] public string Name { get; set; }

        [JsonProperty("height")] public long Height { get; set; }

        [JsonProperty("mass")] public long Mass { get; set; }

        [JsonProperty("hair_color")] public string HairColor { get; set; }

        [JsonProperty("skin_color")] public string SkinColor { get; set; }

        [JsonProperty("eye_color")] public string EyeColor { get; set; }

        [JsonProperty("birth_year")] public string BirthYear { get; set; }

        [JsonProperty("gender")] public string Gender { get; set; }

        [JsonProperty("homeworld")] public Uri Homeworld { get; set; }

        [JsonProperty("films")] public Uri[] Films { get; set; }

        [JsonProperty("species")] public Uri[] Species { get; set; }

        [JsonProperty("vehicles")] public Uri[] Vehicles { get; set; }

        [JsonProperty("starships")] public Uri[] Starships { get; set; }

        [JsonProperty("created")] public DateTimeOffset Created { get; set; }

        [JsonProperty("edited")] public DateTimeOffset Edited { get; set; }

        [JsonProperty("url")] public Uri Url { get; set; }


        public override string ToString() => $"{nameof(Name)}: {Name}, {nameof(Height)}: {Height}, {nameof(Mass)}: {Mass}, {nameof(HairColor)}: {HairColor}, {nameof(SkinColor)}: {SkinColor}, {nameof(EyeColor)}: {EyeColor}, {nameof(BirthYear)}: {BirthYear}, {nameof(Gender)}: {Gender}, {nameof(Homeworld)}: {Homeworld}, {nameof(Films)}: {Films}, {nameof(Species)}: {Species}, {nameof(Vehicles)}: {Vehicles}, {nameof(Starships)}: {Starships}, {nameof(Created)}: {Created}, {nameof(Edited)}: {Edited}, {nameof(Url)}: {Url}";
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
            }
        };
    }
}